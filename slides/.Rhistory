annotate(geom = "text", y = at, x = 1, label = data$values) +
theme_void() +
scale_fill_manual(values=c("#FFCE9F", "#4D4D4D", "#FFD966",
"#E1D5E7", "#9AC7BF", "#CDA2BE", "#A9C4EB")) +
guides(fill=guide_legend(title="Pathway enzymes")) +
theme(
legend.text  = element_text(size = 14),
legend.title = element_text(size = 18)
)
source('~/.active-rstudio-document', echo=TRUE)
View(mat)
library(tidyverse)
read.delim(
"/Volumes/falmeida1TB/bacannot_teste/_ANNOTATION/BAC-COMPARE-2021-03-04/BLASTFROST/Escherichia_yagZ_ecpA_DNA/out_Escherichia_yagZ_ecpA_DNA.fas.search"
)
read.delim(
"/Volumes/falmeida1TB/bacannot_teste/_ANNOTATION/BAC-COMPARE-2021-03-04/BLASTFROST/Escherichia_yagZ_ecpA_DNA/out_Escherichia_yagZ_ecpA_DNA.fas.search"
) %>%
pull(1,2)
df <- read.delim(
"/Volumes/falmeida1TB/bacannot_teste/_ANNOTATION/BAC-COMPARE-2021-03-04/BLASTFROST/Escherichia_yagZ_ecpA_DNA/out_Escherichia_yagZ_ecpA_DNA.fas.search"
) %>%
pull(1,2)
df <- read.delim(
"/Volumes/falmeida1TB/bacannot_teste/_ANNOTATION/BAC-COMPARE-2021-03-04/BLASTFROST/Escherichia_yagZ_ecpA_DNA/out_Escherichia_yagZ_ecpA_DNA.fas.search"
)[,1:2]
View(df)
df <- read.delim(
"/Volumes/falmeida1TB/bacannot_teste/_ANNOTATION/BAC-COMPARE-2021-03-04/BLASTFROST/Escherichia_yagZ_ecpA_DNA/out_Escherichia_yagZ_ecpA_DNA.fas.search",
header = FALSE
)[,1:2]
View(df)
df <- read.delim(
"/Volumes/falmeida1TB/bacannot_teste/_ANNOTATION/BAC-COMPARE-2021-03-04/BLASTFROST/Escherichia_yagZ_ecpA_DNA/out_Escherichia_yagZ_ecpA_DNA.fas.search",
header = FALSE,
col.names = c("Gene", "Sample")
)[,1:2]
colnames(df) <- c("Gene", "Sample")
df %>% spread(Gene)
df %>% spread(Gene, oi)
setwd("/Volumes/falmeida1TB/bacannot_teste/_ANNOTATION/BAC-COMPARE-2021-03-05/BLASTFROST/Escherichia_yagZ_ecpA_DNA")
###############################
### Load required libraries ###
###############################
require(tidyverse)
require(ggtree)
require(ggplot2)
require(ape)
# With this line, we load the BlastFrost result that always has the .search suffix
BlastFrost_res <- read.delim(
file=list.files(pattern="*.search"),
header = FALSE
)[,1:2]
# Now we change the colnames so it is more parseable
colnames(BlastFrost_res) <-
c("Gene", "Samples")
# Then, we get only the name of the samples from the BlastFrost results.
# Using bacannot-compare, the samples names will always be the second value in the path.
BlastFrost_res$Samples <-
lapply(BlastFrost_res$Samples, function(x) {
str_split(x, "\\/")[[1]][[2]]
})
# Load the complete list of genomes that were queried with BlastFrost
# It is required since BlastFrost does not outputs the genome when
# a match does not occur!
genomes <-
read.delim(
"genomes_list.txt",
header = FALSE
)
colnames(genomes) <- "Samples"
genomes$Samples <-
lapply(genomes$Samples, function(x) {
str_split(x, "\\/")[[1]][[2]]
})
View(genomes)
View(BlastFrost_res)
setwd("/Volumes/falmeida1TB/bacannot_teste/_ANNOTATION/COMPARATIVE_ANALYSES/BLASTFROST/TESTE")
###############################
### Load required libraries ###
###############################
require(tidyverse)
require(ggtree)
require(ggplot2)
require(ape)
# With this line, we load the BlastFrost result that always has the .search suffix
BlastFrost_res <- read.delim(
file=list.files(pattern="*.search"),
header = FALSE
)[,1:2]
# Now we change the colnames so it is more parseable
colnames(BlastFrost_res) <-
c("Gene", "Samples")
# Then, we get only the name of the samples from the BlastFrost results.
# Using bacannot-compare, the samples names will always be the second value in the path.
BlastFrost_res$Samples <-
lapply(BlastFrost_res$Samples, function(x) {
tail(str_split(x, "\\/")[[1]], 3)[[1]]
})
# Load the complete list of genomes that were queried with BlastFrost
# It is required since BlastFrost does not outputs the genome when
# a match does not occur!
genomes <-
read.delim(
"genomes_list.txt",
header = FALSE
)
colnames(genomes) <- "Samples"
genomes$Samples <-
lapply(genomes$Samples, function(x) {
tail(str_split(x, "\\/")[[1]], 3)[[1]]
})
read.delim("genes_list.txt")
read.delim("genes_list.txt")$V1
read.delim("genes_list.txt")
as.vector(read.delim("genes_list.txt"))
unique(as.vector(read.delim("genes_list.txt")))
# This loop will check, for each gene available in the BlastFrost
# results, whether a genome has or not a match!
for (gene in unique(unique(as.vector(read.delim("genes_list.txt"))))) {
sbst <- BlastFrost_res[BlastFrost_res$Gene == gene, ]
for (genome in unique(genomes$Samples)) {
if (genome %in% sbst$Samples) {
genomes[genomes$Samples == genome, gene] <- 1
} else {
genomes[genomes$Samples == genome, gene] <- 0
}
}
}
View(genomes)
# This loop will check, for each gene available in the BlastFrost
# results, whether a genome has or not a match!
for (gene in unique(unique(as.vector(read.delim("genes_list.txt"))))) {
sbst <- BlastFrost_res[BlastFrost_res$Gene == gene, ]
for (genome in unique(genomes$Samples)) {
if (genome %in% sbst$Samples) {
genomes[genomes$Samples == genome, gene] <- 1
} else {
genomes[genomes$Samples == genome, gene] <- 0
}
}
}
# This loop will check, for each gene available in the BlastFrost
# results, whether a genome has or not a match!
for (gene in unique(unique(as.vector(read.delim("genes_list.txt"))))) {
if (gene %in% BlastFrost_res$Gene) {
sbst <- BlastFrost_res[BlastFrost_res$Gene == gene, ]
} else {
sbst <- data.frame()
}
for (genome in unique(genomes$Samples)) {
if (genome %in% sbst$Samples) {
genomes[genomes$Samples == genome, gene] <- 1
} else {
genomes[genomes$Samples == genome, gene] <- 0
}
}
}
# This loop will check, for each gene available in the BlastFrost
# results, whether a genome has or not a match!
for (gene in unique(unique(as.vector(read.delim("genes_list.txt"))))) {
print(gene)
if (gene %in% BlastFrost_res$Gene) {
sbst <- BlastFrost_res[BlastFrost_res$Gene == gene, ]
} else {
sbst <- data.frame()
}
for (genome in unique(genomes$Samples)) {
if (genome %in% sbst$Samples) {
genomes[genomes$Samples == genome, gene] <- 1
} else {
genomes[genomes$Samples == genome, gene] <- 0
}
}
}
# This loop will check, for each gene available in the BlastFrost
# results, whether a genome has or not a match!
for (gene in unique(unique(as.vector(read.delim("genes_list.txt", header = F))))) {
print(gene)
if (gene %in% BlastFrost_res$Gene) {
sbst <- BlastFrost_res[BlastFrost_res$Gene == gene, ]
} else {
sbst <- data.frame()
}
for (genome in unique(genomes$Samples)) {
if (genome %in% sbst$Samples) {
genomes[genomes$Samples == genome, gene] <- 1
} else {
genomes[genomes$Samples == genome, gene] <- 0
}
}
}
unique(unique(as.vector(read.delim("genes_list.txt", header = F))))
unique(unique(read.delim("genes_list.txt", header = F)$V1))
# This loop will check, for each gene available in the BlastFrost
# results, whether a genome has or not a match!
for (gene in unique(unique(read.delim("genes_list.txt", header = F)$V1))) {
print(gene)
if (gene %in% BlastFrost_res$Gene) {
sbst <- BlastFrost_res[BlastFrost_res$Gene == gene, ]
} else {
sbst <- data.frame()
}
for (genome in unique(genomes$Samples)) {
if (genome %in% sbst$Samples) {
genomes[genomes$Samples == genome, gene] <- 1
} else {
genomes[genomes$Samples == genome, gene] <- 0
}
}
}
source('/Volumes/falmeida1TB/bacannot_teste/_ANNOTATION/COMPARATIVE_ANALYSES/BLASTFROST/TESTE/blastfrost_heatmap.R', echo=TRUE)
require(ggtree)
# teste plot
require(ggplot2)
library(scales)
library(dplyr)
ntop <- 15
subtitle_var <- paste('Top ', ntop, ' terms ordered by Kolmogorov-Smirnov p-value')
ggdata <- read.csv("~/00_TESTE_ASC_SEURAT/enriched_GO_terms.csv", stringsAsFactors = FALSE) %>%
arrange(KS)
ggdata <- ggdata[1:ntop,]
gg2 <- ggplot(ggdata,
aes(x = Term, y = -log10(KS), size = -log10(KS), fill = -log10(KS))) +
expand_limits(y = 1) +
geom_point(shape = 21) +
scale_size(range = c(2.5,12.5)) +
scale_fill_continuous(low = 'royalblue', high = 'red4') +
xlab('') + ylab('Enrichment score') +
labs(
title = 'GO Biological processes',
subtitle = subtitle_var,
caption = 'Cut-off lines drawn at equivalents of p=0.05, p=0.01, p=0.001') +
facet_grid(rows = vars(Macro), drop = T, scales = 'free') +
geom_hline(yintercept = c(-log10(0.05), -log10(0.01), -log10(0.001)),
linetype = rep(c("dotted", "longdash", "solid"), 3),
colour = rep(c("black", "black", "black"), 3),
size = rep(c(0.5, 1.5, 3), 3)) +
theme_bw(base_size = 24) +
theme(
legend.position = 'right',
legend.background = element_rect(),
plot.title = element_text(angle = 0, size = 16, face = 'bold', vjust = 1),
plot.subtitle = element_text(angle = 0, size = 14, face = 'bold', vjust = 1),
plot.caption = element_text(angle = 0, size = 12, face = 'bold', vjust = 1, hjust = 0.5),
strip.text = element_text(angle = 0, size = 10, face = 'bold', vjust = 1),
axis.text.x = element_text(angle = 0, size = 12, face = 'bold', hjust = 1.10),
axis.text.y = element_text(angle = 0, size = 12, face = 'bold', vjust = 0.5),
axis.title = element_text(size = 12, face = 'bold'),
axis.title.x = element_text(size = 12, face = 'bold'),
axis.title.y = element_text(size = 12, face = 'bold'),
axis.line = element_line(colour = 'black'),
#Legend
legend.key = element_blank(), # removes the border
legend.key.size = unit(1, "cm"), # Sets overall area/size of the legend
legend.text = element_text(size = 14, face = "bold"), # Text size
title = element_text(size = 14, face = "bold")) +
coord_flip()
#+ guides(fill = guide_legend(override.aes = list(size=10)))
gg2
ntop <- 15
subtitle_var <- paste('Top ', ntop, ' terms ordered by Kolmogorov-Smirnov p-value')
ggdata <- read.csv("~/00_TESTE_ASC_SEURAT/enriched_GO_terms.csv", stringsAsFactors = FALSE) %>%
arrange(KS)
ggdata <- ggdata[1:ntop,]
ggdata$Term <- factor(ggdata$Term, levels = rev(ggdata$Term)) # fixes order
gg2 <- ggplot(ggdata,
aes(x = Term, y = -log10(KS), size = -log10(KS), fill = -log10(KS))) +
expand_limits(y = 1) +
geom_point(shape = 21) +
scale_size(range = c(2.5,12.5)) +
scale_fill_continuous(low = 'royalblue', high = 'red4') +
xlab('') + ylab('Enrichment score') +
labs(
title = 'GO Biological processes',
subtitle = subtitle_var,
caption = 'Cut-off lines drawn at equivalents of p=0.05, p=0.01, p=0.001') +
facet_grid(rows = vars(Macro), drop = T, scales = 'free') +
geom_hline(yintercept = c(-log10(0.05), -log10(0.01), -log10(0.001)),
linetype = rep(c("dotted", "longdash", "solid"), 3),
colour = rep(c("black", "black", "black"), 3),
size = rep(c(0.5, 1.5, 3), 3)) +
theme_bw(base_size = 24) +
theme(
legend.position = 'right',
legend.background = element_rect(),
plot.title = element_text(angle = 0, size = 16, face = 'bold', vjust = 1),
plot.subtitle = element_text(angle = 0, size = 14, face = 'bold', vjust = 1),
plot.caption = element_text(angle = 0, size = 12, face = 'bold', vjust = 1, hjust = 0.5),
strip.text = element_text(angle = 0, size = 10, face = 'bold', vjust = 1),
axis.text.x = element_text(angle = 0, size = 12, face = 'bold', hjust = 1.10),
axis.text.y = element_text(angle = 0, size = 12, face = 'bold', vjust = 0.5),
axis.title = element_text(size = 12, face = 'bold'),
axis.title.x = element_text(size = 12, face = 'bold'),
axis.title.y = element_text(size = 12, face = 'bold'),
axis.line = element_line(colour = 'black'),
#Legend
legend.key = element_blank(), # removes the border
legend.key.size = unit(1, "cm"), # Sets overall area/size of the legend
legend.text = element_text(size = 14, face = "bold"), # Text size
title = element_text(size = 14, face = "bold")) +
coord_flip()
#+ guides(fill = guide_legend(override.aes = list(size=10)))
gg2
ntop <- 15
subtitle_var <- paste('Top ', ntop, ' terms ordered by Kolmogorov-Smirnov p-value')
ggdata <- read.csv("~/00_TESTE_ASC_SEURAT/enriched_GO_terms.csv", stringsAsFactors = FALSE) %>%
arrange(KS)
ggdata <- ggdata[1:ntop,]
ggdata$Term <- factor(ggdata$Term, levels = rev(ggdata$Term)) # fixes order
gg2 <- ggplot(ggdata,
aes(x = Term, y = -log10(KS), size = -log10(KS), fill = -log10(KS))) +
expand_limits(y = 1) +
geom_point(shape = 21) +
scale_size(range = c(2.5,12.5)) +
scale_fill_continuous(low = 'royalblue', high = 'red4') +
xlab('') + ylab('Enrichment score -log10(KS)') +
labs(
title = 'GO Biological processes',
subtitle = subtitle_var,
caption = 'Cut-off lines drawn at equivalents of p=0.05, p=0.01, p=0.001') +
facet_grid(rows = vars(Macro), drop = T, scales = 'free') +
geom_hline(yintercept = c(-log10(0.05), -log10(0.01), -log10(0.001)),
linetype = rep(c("dotted", "longdash", "solid"), 3),
colour = rep(c("black", "black", "black"), 3),
size = rep(c(0.5, 1.5, 3), 3)) +
theme_bw(base_size = 24) +
theme(
legend.position = 'right',
legend.background = element_rect(),
plot.title = element_text(angle = 0, size = 16, face = 'bold', vjust = 1),
plot.subtitle = element_text(angle = 0, size = 14, face = 'bold', vjust = 1),
plot.caption = element_text(angle = 0, size = 12, face = 'bold', vjust = 1, hjust = 0.5),
strip.text = element_text(angle = 0, size = 10, face = 'bold', vjust = 1),
axis.text.x = element_text(angle = 0, size = 12, face = 'bold', hjust = 1.10),
axis.text.y = element_text(angle = 0, size = 12, face = 'bold', vjust = 0.5),
axis.title = element_text(size = 12, face = 'bold'),
axis.title.x = element_text(size = 12, face = 'bold'),
axis.title.y = element_text(size = 12, face = 'bold'),
axis.line = element_line(colour = 'black'),
#Legend
legend.key = element_blank(), # removes the border
legend.key.size = unit(1, "cm"), # Sets overall area/size of the legend
legend.text = element_text(size = 14, face = "bold"), # Text size
title = element_text(size = 14, face = "bold")) +
coord_flip()
#+ guides(fill = guide_legend(override.aes = list(size=10)))
gg2
ggsave(gg2, filename = '~/00_TESTE_ASC_SEURAT/pmc_top15_enrichement.svg',
dpi = 1000, device = 'svg')
gg2 <- ggplot(ggdata,
aes(x = Term, y = -log10(KS), size = -log10(KS), fill = -log10(KS))) +
expand_limits(y = 1) +
geom_point(shape = 21) +
scale_size(range = c(2.5,12.5)) +
scale_fill_continuous(low = 'royalblue', high = 'red4') +
xlab('') + ylab('Enrichment score -log10(KS)') +
labs(
title = 'GO Enrichment Analysis',
subtitle = subtitle_var,
caption = 'Cut-off lines drawn at equivalents of p=0.05, p=0.01, p=0.001') +
facet_grid(rows = vars(Macro), drop = T, scales = 'free') +
geom_hline(yintercept = c(-log10(0.05), -log10(0.01), -log10(0.001)),
linetype = rep(c("dotted", "longdash", "solid"), 3),
colour = rep(c("black", "black", "black"), 3),
size = rep(c(0.5, 1.5, 3), 3)) +
theme_bw(base_size = 24) +
theme(
legend.position = 'right',
legend.background = element_rect(),
plot.title = element_text(angle = 0, size = 16, face = 'bold', vjust = 1),
plot.subtitle = element_text(angle = 0, size = 14, face = 'bold', vjust = 1),
plot.caption = element_text(angle = 0, size = 12, face = 'bold', vjust = 1, hjust = 0.5),
strip.text = element_text(angle = 0, size = 10, face = 'bold', vjust = 1),
axis.text.x = element_text(angle = 0, size = 12, face = 'bold', hjust = 1.10),
axis.text.y = element_text(angle = 0, size = 12, face = 'bold', vjust = 0.5),
axis.title = element_text(size = 12, face = 'bold'),
axis.title.x = element_text(size = 12, face = 'bold'),
axis.title.y = element_text(size = 12, face = 'bold'),
axis.line = element_line(colour = 'black'),
#Legend
legend.key = element_blank(), # removes the border
legend.key.size = unit(1, "cm"), # Sets overall area/size of the legend
legend.text = element_text(size = 14, face = "bold"), # Text size
title = element_text(size = 14, face = "bold")) +
coord_flip()
#+ guides(fill = guide_legend(override.aes = list(size=10)))
gg2
# save
ggsave(gg2, filename = '~/00_TESTE_ASC_SEURAT/pmc_top15_enrichement.png',
dpi = 1000, device = 'png')
ggsave(gg2, filename = '~/00_TESTE_ASC_SEURAT/pmc_top15_enrichement.svg',
dpi = 1000, device = 'svg')
source('~/00_TESTE_ASC_SEURAT/plotGO.R', echo=TRUE)
ggsave(gg2, filename = '~/00_TESTE_ASC_SEURAT/pmc_top15_enrichement.svg',
dpi = 1000, device = 'svg', width = 10)
# save
ggsave(gg2, filename = '~/00_TESTE_ASC_SEURAT/pmc_top15_enrichement.png',
dpi = 1000, device = 'png', width = 10)
# save
ggsave(gg2, filename = '~/00_TESTE_ASC_SEURAT/pmc_top15_enrichement.png',
dpi = 1000, device = 'png', width = 15)
ggsave(gg2, filename = '~/00_TESTE_ASC_SEURAT/pmc_top15_enrichement.svg',
dpi = 1000, device = 'svg', width = 15)
# save
ggsave(gg2, filename = '~/00_TESTE_ASC_SEURAT/pmc_top15_enrichement.png',
dpi = 1000, device = 'png', width = 10)
ggsave(gg2, filename = '~/00_TESTE_ASC_SEURAT/pmc_top15_enrichement.svg',
dpi = 1000, device = 'svg', width = 10)
# save
ggsave(gg2, filename = '~/00_TESTE_ASC_SEURAT/pmc_top15_enrichement.png',
dpi = 1000, device = 'png', width = 11)
ggsave(gg2, filename = '~/00_TESTE_ASC_SEURAT/pmc_top15_enrichement.svg',
dpi = 1000, device = 'svg', width = 11)
# save
ggsave(gg2, filename = '~/00_TESTE_ASC_SEURAT/pmc_top15_enrichement.png',
dpi = 1000, device = 'png', width = 10)
ggsave(gg2, filename = '~/00_TESTE_ASC_SEURAT/pmc_top15_enrichement.svg',
dpi = 1000, device = 'svg', width = 10)
license()
install.packages("esquisse")
https://github.com/dreamRs/esquisse
esquisse::esquisser()
library(iris)
esquisse::esquisser()
setwd("~/Desktop/minicurso_semabio")
install.packages('xaringan')
# All defaults
include_graphics(images/sanger-sequencing_dna-structure.png)
library(knitr)
# All defaults
include_graphics(images/sanger-sequencing_dna-structure.png)
# All defaults
include_graphics('images/sanger-sequencing_dna-structure.png')
include_graphics('images/sanger-sequencing_dna-structure.png')
library(knitr)
library(xaringanthemer)
style_mono_accent(
base_color = "#1c5253",
header_font_google = google_font("Josefin Sans"),
text_font_google   = google_font("Montserrat", "300", "300i"),
code_font_google   = google_font("Fira Mono")
)
library(xaringanthemer)
style_mono_accent(
base_color = "#43418A",
header_font_google = google_font("Josefin Sans"),
text_font_google   = google_font("Montserrat", "300", "300i"),
code_font_google   = google_font("Fira Mono")
)
remotes::install_github("gadenbuie/xaringanExtra")
library(knitr)
library(xaringanthemer)
style_mono_accent(
base_color = "#43418A",
header_font_google = google_font("Josefin Sans"),
text_font_google   = google_font("Montserrat", "300", "300i"),
code_font_google   = google_font("Fira Mono"),
link_color = "#82a8f2"
)
library(xaringanthemer)
style_mono_accent(
base_color = "#43418A",
header_font_google = google_font("Josefin Sans"),
text_font_google   = google_font("Montserrat", "300", "300i"),
code_font_google   = google_font("Fira Mono"),
link_color = "#fba073"
)
devtools::install_github("ropenscilabs/icon")
library(knitr)
library(icons)
devtools::install_github("ropenscilabs/icon")
devtools::install_github("ropenscilabs/icon", force = T)
icons::download_fontawesome()
icons::fa("rocket")
available::available()
fontawesome("rocket")
xaringanExtra::use_animate_css(xaringan = F)
xaringanExtra::use_animate_all("bounceInDown")
xaringanExtra::use_animate_css()
xaringanExtra::use_animate_all("bounceInDown")
library(knitr)
library(icons)
# source: https://github.com/gadenbuie/xaringanExtra
#xaringanExtra::use_animate_css()
#xaringanExtra::use_animate_all("slide_down")
xaringanExtra::use_scribble()
xaringanExtra::use_search(show_icon = TRUE)
xaringanExtra::use_tachyons()
xaringanExtra::use_webcam()
xaringanExtra::use_freezeframe()
htmltools::tagList(
xaringanExtra::use_clipboard(
button_text = "<i class=\"fa fa-clipboard\"></i>",
success_text = "<i class=\"fa fa-check\" style=\"color: #90BE6D\"></i>",
error_text = "<i class=\"fa fa-times-circle\" style=\"color: #F94144\"></i>"
),
rmarkdown::html_dependency_font_awesome()
)
xaringanExtra::use_fit_screen()
xaringanExtra::use_extra_styles(
hover_code_line = TRUE,         #<<
mute_unhighlighted_code = TRUE  #<<
)
library(xaringanthemer)
style_mono_accent(
base_color = "#43418A",
header_font_google = google_font("Josefin Sans"),
text_font_google   = google_font("Montserrat", "300", "300i"),
code_font_google   = google_font("Fira Mono"),
link_color = "#ff9f9f"
)
